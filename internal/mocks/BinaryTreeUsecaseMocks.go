// Code generated by MockGen. DO NOT EDIT.
// Source: ../src/github.com/shashaneRanasinghe/BinaryTreeMaxPathSum/internal/usecases/BinaryTreeUsecase.go
//
// Generated by this command:
//
//	mockgen -source=../src/github.com/shashaneRanasinghe/BinaryTreeMaxPathSum/internal/usecases/BinaryTreeUsecase.go -destination=../src/github.com/shashaneRanasinghe/BinaryTreeMaxPathSum/internal/mocks/BinaryTreeUsecaseMocks.go
//

// Package mock_usecases is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/shashaneRanasinghe/BinaryTreeMaxPathSum/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockBinaryTree is a mock of BinaryTree interface.
type MockBinaryTree struct {
	ctrl     *gomock.Controller
	recorder *MockBinaryTreeMockRecorder
}

// MockBinaryTreeMockRecorder is the mock recorder for MockBinaryTree.
type MockBinaryTreeMockRecorder struct {
	mock *MockBinaryTree
}

// NewMockBinaryTree creates a new mock instance.
func NewMockBinaryTree(ctrl *gomock.Controller) *MockBinaryTree {
	mock := &MockBinaryTree{ctrl: ctrl}
	mock.recorder = &MockBinaryTreeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBinaryTree) EXPECT() *MockBinaryTreeMockRecorder {
	return m.recorder
}

// FindMaxPathSum mocks base method.
func (m *MockBinaryTree) FindMaxPathSum(rootNode *models.Node, tree *models.Tree) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMaxPathSum", rootNode, tree)
	ret0, _ := ret[0].(int)
	return ret0
}

// FindMaxPathSum indicates an expected call of FindMaxPathSum.
func (mr *MockBinaryTreeMockRecorder) FindMaxPathSum(rootNode, tree any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMaxPathSum", reflect.TypeOf((*MockBinaryTree)(nil).FindMaxPathSum), rootNode, tree)
}
